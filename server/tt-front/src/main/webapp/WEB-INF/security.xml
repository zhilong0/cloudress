<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">
	<sec:debug />
	<sec:global-method-security pre-post-annotations="enabled">
		<sec:expression-handler ref="methodSecurityExpressionHandler" />
	</sec:global-method-security>
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userObjectService" />
		<property name="key" value="Oba.2247d" />
	</bean>
	<bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor" />
	<bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor" />
	<bean id="successAuthenticationListener" class="com.tt.idm.authentication.UserSuccessAuthenticationListener">
		<constructor-arg index="0" ref="userManagementService" />
	</bean>
	<bean id="authenticationEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher" />
	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="authenticationEventPublisher" ref="authenticationEventPublisher" />
		<property name="providers">
			<list>
				<ref bean="basicAuthenticationProvider" />
			</list>
		</property>
	</bean>
	<bean id="webAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg>
			<list>
				<ref bean="webExpressionVoter" />
			</list>
		</constructor-arg>
	</bean>
	<bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="permissionEvaluator" />
	</bean>
	<bean id="methodSecurityExpressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<property name="permissionEvaluator" ref="permissionEvaluator" />
	</bean>
	<bean id="permissionEvaluator" class="com.tt.idm.authorization.RoleBasePermissionEvaluator" />
	<bean id="webExpressionVoter" class="org.springframework.security.web.access.expression.WebExpressionVoter">
		<property name="expressionHandler" ref="webSecurityExpressionHandler" />
	</bean>

	<bean id="FILTER_SECURITY_INTERCEPTOR" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="webAccessDecisionManager" />
		<property name="securityMetadataSource" ref="securityInterceptorMetadataSource" />
	</bean>
	<bean id="EXCEPTION_TRANSLATION_FILTER" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<bean class="com.tt.idm.authentication.Http401UnauthorizededEntryPoint" />
		</property>
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
		</property>
	</bean>
	<bean id="ANONYMOUS_AUTHENTICATION_FILTER" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<constructor-arg index="0" value="test" />
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>
	<bean id="ANTHENTICATION_FILTER" class="com.tt.idm.authentication.http.filter.UserPropertyAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="/auth/basic" />
		<property name="authenticationFailureHandler">
			<bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/auth/login.html" />
				<property name="useForward" value="true" />
			</bean>
		</property>
		<property name="authenticationSuccessHandler">
			<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/" />
			</bean>
		</property>
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>
	<bean id="LOCALE_CONTEXT_FILTER" class="com.tt.http.filter.LocaleContextHolderFilter">
		<property name="localeResolver">
			<bean class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
		</property>
	</bean>
	<bean id="LOGOUT_FILTER" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg index="0" value="/" />
		<constructor-arg index="1">
			<list>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="logoutRequestMatcher">
			<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
				<constructor-arg index="0" value="/auth/logout" />
			</bean>
		</property>
	</bean>
	<bean id="REMEMBER_ME_FILTER" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>
	<bean id="CHANNEL_FILTER" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
		<property name="channelDecisionManager">
			<bean class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
				<property name="channelProcessors">
					<list>
						<ref bean="secureChannelProcessor" />
						<ref bean="insecureChannelProcessor" />
					</list>
				</property>
			</bean>
		</property>
		<property name="securityMetadataSource" ref="channelMetadataSource" />
	</bean>
	<bean id="SECURITY_CONTEXT_FILTER" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	<bean id="CSRF_FILTER" class="org.springframework.security.web.csrf.CsrfFilter">
		<constructor-arg index="0">
			<bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />
		</constructor-arg>
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/auth/accessDenied.html" />
			</bean>
		</property>
	</bean>
	<bean id="httpsProxy" class="org.apache.http.HttpHost">
		<constructor-arg index="0" value="proxy.sha.sap.corp" />
		<constructor-arg index="1" value="8080" />
		<constructor-arg index="2" value="https" />
	</bean>
	<bean id="oauth2RequestFactory" class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
		<constructor-arg>
			<bean class="com.tt.common.http.client.HttpClientBeanFactory">
				<property name="httpClientConnectionManager">
					<bean class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" />
				</property>
			</bean>
		</constructor-arg>
		<property name="connectTimeout" value="5000" />
	</bean>
	<bean id="sinaOAuthClientContext" scope="session" class="org.springframework.security.oauth2.client.DefaultOAuth2ClientContext">
		<constructor-arg index="0" ref="accessTokenRequest" />
		<aop:scoped-proxy />
	</bean>
	<bean id="qqOAuthClientContext" scope="session" class="org.springframework.security.oauth2.client.DefaultOAuth2ClientContext">
		<constructor-arg index="0" ref="accessTokenRequest" />
		<aop:scoped-proxy />
	</bean>
	<bean id="accessTokenRequest" scope="request" class="org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest">
		<aop:scoped-proxy />
	</bean>
	<bean id="sinaOAuthResource" class="org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails">
		<property name="clientId" value="2843288911" />
		<property name="clientSecret" value="10c08127cd2b02fe090fe2f0b620cb8a" />
		<property name="accessTokenUri" value="https://api.weibo.com/oauth2/access_token" />
		<property name="userAuthorizationUri" value="https://open.weibo.cn/oauth2/authorize?display=mobile" />
		<property name="grantType" value="authorization_code" />
		<property name="clientAuthenticationScheme" value="query" />
		<property name="preEstablishedRedirectUri" value="http://www.longtes.com/cloudress/sina/oauth2" />
	</bean>
	<bean id="qqOAuthResource" class="org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails">
		<property name="clientId" value="101161945" />
		<property name="clientSecret" value="5790d218650d62495b9e769f92dc4a73" />
		<property name="accessTokenUri" value="https://graph.qq.com/oauth2.0/token" />
		<property name="userAuthorizationUri" value="https://graph.qq.com/oauth2.0/authorize?display=mobile" />
		<property name="grantType" value="authorization_code" />
		<property name="clientAuthenticationScheme" value="query" />
		<property name="preEstablishedRedirectUri" value="http://www.longtes.com/cloudress/qq/oauth2" />
	</bean>
	<bean id="OAUTH2_CLIENT_CONTEXT_FILTER" class="org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter" />
	<bean id="SINA_OAUTH2_CLIENT_AUTHENTICATION_FILTER" class="com.tt.idm.authentication.oauth2.sina.SinaOauth2ClientAuthenticationFilter">
		<constructor-arg index="0" value="/sina/oauth2" />
		<property name="userManagementService" ref="userManagementService" />
		<property name="resourceInterface">
			<bean class="com.tt.idm.authentication.oauth2.sina.SinaOAuth2ResourceInterface">
				<constructor-arg index="0" ref="sinaOAuthResource" />
				<constructor-arg index="1" ref="sinaOAuthClientContext" />
				<constructor-arg index="2" ref="oauth2RequestFactory" />
				<property name="userDetailsUri" value="https://api.weibo.com/2/users/show.json" />
			</bean>
		</property>
		<property name="authenticationSuccessHandler">
			<bean class="com.tt.idm.authentication.JsonResponseAuthenticationSuccessHandler" />
		</property>
		<property name="authenticationFailureHandler">
			<bean class="com.tt.idm.authentication.JsonResponseAuthenticationFailureHandler" />
		</property>
	</bean>
	<bean id="QQ_OAUTH2_CLIENT_AUTHENTICATION_FILTER" class="com.tt.idm.authentication.oauth2.qq.QQOAuth2ClientAuthenticationFilter">
		<constructor-arg index="0" value="/qq/oauth2" />
		<property name="userManagementService" ref="userManagementService" />
		<property name="resourceInterface">
			<bean class="com.tt.idm.authentication.oauth2.qq.QQOAuth2ResourceInterface">
				<constructor-arg index="0" ref="qqOAuthResource" />
				<constructor-arg index="1" ref="qqOAuthClientContext" />
				<constructor-arg index="2" ref="oauth2RequestFactory" />
				<property name="userDetailsUri" value="https://graph.qq.com/user/get_user_info" />
				<property name="openIdUri" value="https://graph.qq.com/oauth2.0/me" />
			</bean>
		</property>
		<property name="authenticationSuccessHandler">
			<bean class="com.tt.idm.authentication.JsonResponseAuthenticationSuccessHandler" />
		</property>
		<property name="authenticationFailureHandler">
			<bean class="com.tt.idm.authentication.JsonResponseAuthenticationFailureHandler" />
		</property>
	</bean>
	<sec:filter-security-metadata-source id="securityInterceptorMetadataSource"
		use-expressions="true">
		<sec:intercept-url pattern="/rs/users" method="POST" access="permitAll" />
		<sec:intercept-url pattern="/rs/users/email/verify" method="POST" access="permitAll" />
		<sec:intercept-url pattern="/rs/users/cellphone/verify" method="POST" access="permitAll" />
		<sec:intercept-url pattern="/rs/auth/**" access="permitAll" />
		<sec:intercept-url pattern="/rs/**" method="POST" access="isAuthenticated()" />
		<sec:intercept-url pattern="/rs/**" method="DELETE" access="isAuthenticated()" />
		<sec:intercept-url pattern="/rs/**" method="PUT" access="isAuthenticated()" />
	</sec:filter-security-metadata-source>
	<sec:filter-security-metadata-source id="channelMetadataSource">
		<sec:intercept-url pattern="/secure/**" access="REQUIRES_SECURE_CHANNEL" />
	</sec:filter-security-metadata-source>
	<bean id="securityfilterChain" class="org.springframework.security.web.FilterChainProxy">
		<sec:filter-chain-map path-type="ant">
			<sec:filter-chain pattern="/**/*.jpg" filters="none" />
			<sec:filter-chain pattern="/**/*.gif" filters="none" />
			<sec:filter-chain pattern="/**/*.tif" filters="none" />
			<sec:filter-chain pattern="/**/*.png" filters="none" />
			<sec:filter-chain pattern="/image/**" filters="none" />
			<sec:filter-chain pattern="/**/*.js" filters="none" />
			<sec:filter-chain pattern="/**/*.css" filters="none" />
			<sec:filter-chain pattern="/sina/oauth2"
				filters="SECURITY_CONTEXT_FILTER,LOCALE_CONTEXT_FILTER,OAUTH2_CLIENT_CONTEXT_FILTER,SINA_OAUTH2_CLIENT_AUTHENTICATION_FILTER" />
			<sec:filter-chain pattern="/qq/oauth2"
				filters="SECURITY_CONTEXT_FILTER,LOCALE_CONTEXT_FILTER,OAUTH2_CLIENT_CONTEXT_FILTER,QQ_OAUTH2_CLIENT_AUTHENTICATION_FILTER" />
			<sec:filter-chain pattern="/rs/auth/**"
				filters="CHANNEL_FILTER,SECURITY_CONTEXT_FILTER,LOCALE_CONTEXT_FILTER,LOGOUT_FILTER" />
			<sec:filter-chain pattern="/rs/**"
				filters="CHANNEL_FILTER,SECURITY_CONTEXT_FILTER,LOCALE_CONTEXT_FILTER, REMEMBER_ME_FILTER, ANONYMOUS_AUTHENTICATION_FILTER,FILTER_SECURITY_INTERCEPTOR, EXCEPTION_TRANSLATION_FILTER" />
		</sec:filter-chain-map>
	</bean>
</beans>